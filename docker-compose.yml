version: '3.7'

services:
  proxy:
    image: nginx:1.19.6-alpine
    container_name: weekend-proxy
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./images:/var/www/app/public/images:rw
      - ./proxy/certbot/conf:/etc/letsencrypt:rw
      - ./proxy/certbot/www:/var/www/certbot:rw
    restart: unless-stopped
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    networks:
      - backend-network
      - admin-network
    depends_on:
      - server
      - admin
      - certbot

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./proxy/certbot/conf:/etc/letsencrypt:rw
      - ./proxy/certbot/www:/var/www/certbot:rw
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - backend-network

  server:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: weekend-server
    volumes:
      - ./images:/app/images:rw
    environment:
      - NODE_ENV=production
      - PORT=3000
    #   - POSTGRES_USER=${DB_USERNAME}
    #   - POSTGRES_PASSWORD=${DB_PASSWORD}
    #   - POSTGRES_HOST=postgresql
    #   - POSTGRES_DB=${DB_NAME}
    restart: unless-stopped
    networks:
      - backend-network
    depends_on:
      - postgresql

  postgresql:
    image: postgres:13.1-alpine
    container_name: weekend-db
    ports:
      - '5416:5432'
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - database-data:/var/lib/postgresql/data
    networks:
      - backend-network

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile.admin
    container_name: weekend-admin
    restart: unless-stopped
    volumes:
      - ./admin/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - admin-network
    depends_on:
      - server

networks:
  backend-network:
    driver: bridge
  admin-network:
    driver: bridge

volumes:
  database-data:
  pgadmin:
